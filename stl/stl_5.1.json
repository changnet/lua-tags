[{"url":"","name":"_G","kind":3,"comment":"A global variable (not a function) that holds the global environment (that is, **_G._G = _G**). Lua itself does not use this variable; changing its value does not affect any environment, nor vice-versa. (Use **setfenv** to change environments.)"},{"url":"","name":"_VERSION","kind":13,"comment":"A global variable (not a function) that holds a string containing the current interpreter version. The current contents of this variable is \"**Lua 5.1**\"."},{"url":"","name":"assert","kind":12,"comment":"Issues an  error when the value of its argument **v** is false (i.e., **nil** or **false**); otherwise, returns all its arguments. **message** is an error message; when absent, it defaults to \"assertion failed!\"","parameters":["v","message"]},{"url":"","name":"collectgarbage","kind":12,"comment":"This function is a generic interface to the garbage collector. It performs different functions according to its first argument, **opt**:  ","parameters":["opt","arg"]},{"url":"","name":"dofile","kind":12,"comment":"Opens the named file and executes its contents as a Lua chunk. When called without arguments, **dofile** executes the contents of the standard input (**stdin**). Returns all values returned by the chunk. In case of errors, **dofile** propagates the error to its caller (that is, **dofile** does not run in protected mode).","parameters":["filename"]},{"url":"","name":"error","kind":12,"comment":"Terminates the last protected function called and returns **message** as the error message. Function **error** never returns.","parameters":["message","level"]},{"url":"","name":"getfenv","kind":12,"comment":"Returns the current environment in use by the function. **f** can be a Lua function or a number that specifies the function at that stack level: Level 1 is the function calling **getfenv**. If the given function is not a Lua function, or if **f** is 0, **getfenv** returns the global environment. The default for **f** is 1.","parameters":["f"]},{"url":"","name":"getmetatable","kind":12,"comment":"If **object** does not have a metatable, returns **nil**. Otherwise, if the object's metatable has a **\"__metatable\"** field, returns the associated value. Otherwise, returns the metatable of the given object.","parameters":["object"]},{"url":"","name":"ipairs","kind":12,"comment":"Returns three values: an iterator function, the table **t**, and 0, so that the construction  \n\n      for i,v in ipairs(t) do body end \n\n will iterate over the pairs (**1,t[1]**), (**2,t[2]**), ..., up to the first integer key absent from the table","parameters":["t"]},{"url":"","name":"load","kind":12,"comment":"Loads a chunk using function **func** to get its pieces. Each call to **func** must return a string that concatenates with previous results. A return of an empty string, **nil**, or no value signals the end of the chunk.","parameters":["func","chunkname"]},{"url":"","name":"loadfile","kind":12,"comment":"Similar to **load**, but gets the chunk from file **filename** or from the standard input, if no file name is given.","parameters":["filename"]},{"url":"","name":"loadstring","kind":12,"comment":"Similar to **load**, but gets the chunk from the given string.","parameters":["string","chunkname"]},{"url":"","name":"module","kind":12,"comment":"Creates a module. If there is a table in **package.loaded[name]**, this table is the module. Otherwise, if there is a global table **t** with the given name, this table is the module. Otherwise creates a new table **t** and sets it as the value of the global **name** and the value of **package.loaded[name]**. This function also initializes **t._NAME** with the given name, **t._M** with the module (**t** itself), and **t._PACKAGE** with the package name (the full module name minus last component; see below). Finally, **module** sets **t** as the new environment of the current function and the new value of **package.loaded[name]**, so that **require** returns **t**.","parameters":["name","..."]},{"url":"","name":"next","kind":12,"comment":"Allows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. **next** returns the next index of the table and its associated value. When called with **nil** as its second argument, **next** returns an initial index and its associated value. When called with the last index, or with **nil** in an empty table, **next** returns **nil**. If the second argument is absent, then it is interpreted as **nil**. In particular, you can use **next(t)** to check whether a table is empty.","parameters":["table","index"]},{"url":"","name":"pairs","kind":12,"comment":"Returns three values: the **next** function, the table **t**, and **nil**, so that the construction  \n\n      for k,v in pairs(t) do body end \n\n will iterate over all key-value pairs of table **t**","parameters":["t"]},{"url":"","name":"pcall","kind":12,"comment":"Calls function **f** with the given arguments in protected mode. This means that any error inside **f** is not propagated; instead, **pcall** catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, **pcall** also returns all results from the call, after this first result. In case of any error, **pcall** returns **false** plus the error message.","parameters":["f","arg1","..."]},{"url":"","name":"print","kind":12,"comment":"Receives any number of arguments, and prints their values to **stdout**, using the **string.format**.","parameters":["..."]},{"url":"","name":"rawequal","kind":12,"comment":"Checks whether **v1** is equal to **v2**, without invoking any metamethod. Returns a boolean.","parameters":["v1","v2"]},{"url":"","name":"rawget","kind":12,"comment":"Gets the real value of **table[index]**, without invoking any metamethod. **table** must be a table; **index** may be any value.","parameters":["table","index"]},{"url":"","name":"rawset","kind":12,"comment":"Sets the real value of **table[index]** to **value**, without invoking any metamethod. **table** must be a table, **index** any value different from **nil**, and **value** any Lua value.","parameters":["table","index","value"]},{"url":"","name":"require","kind":12,"comment":"Loads the given module. The function starts by looking into the **package.loaded** table to determine whether **modname** is already loaded. If it is, then **require** returns the value stored at **package.loaded[modname]**. Otherwise, it tries to find a loader for the module.","parameters":["modname"]},{"url":"","name":"select","kind":12,"comment":"If **index** is a number, returns all arguments after argument number **index**. Otherwise, **index** must be the string **\"#\"**, and **select** returns the total number of extra arguments it received.","parameters":["index","..."]},{"url":"","name":"setfenv","kind":12,"comment":"Sets the environment to be used by the given function. **f** can be a Lua function or a number that specifies the function at that stack level: Level 1 is the function calling **setfenv**. **setfenv** returns the given function.","parameters":["f","table"]},{"url":"","name":"setmetatable","kind":12,"comment":"Sets the metatable for the given table. (You cannot change the metatable of other types from Lua, only from C.) If **metatable** is **nil**, removes the metatable of the given table. If the original metatable has a **\"__metatable\"** field, raises an error.","parameters":["table","metatable"]},{"url":"","name":"tonumber","kind":12,"comment":"Tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then **tonumber** returns this number; otherwise, it returns **nil**.","parameters":["e","base"]},{"url":"","name":"tostring","kind":12,"comment":"Receives an argument of any type and converts it to a string in a reasonable format. For complete control of how numbers are converted, use **string.format**.","parameters":["e"]},{"url":"","name":"type","kind":12,"comment":"Returns the type of its only argument, coded as a string. The possible results of this function are \"**nil**\" (a string, not the value **nil**), \"**number**\", \"**string**\", \"**boolean**\", \"**table**\", \"**function**\", \"**thread**\", and \"**userdata**\".","parameters":["v"]},{"url":"","name":"unpack","kind":12,"comment":"Returns the elements from the given table. This function is equivalent to  \n\n      return list[i], list[i+1], ..., list[j] \n\n except that the above code can be written only for a fixed number of elements. By default, **i** is 1 and **j** is the length of the list, as defined by the length operator (see **&2.5.5**)","parameters":["list","i","j"]},{"url":"","name":"xpcall","kind":12,"comment":"This function is similar to **pcall**, except that you can set a new error handler.","parameters":["f","err"]},{"url":"","name":"create","base":"coroutine","kind":12,"comment":"Creates a new coroutine, with body **f**. **f** must be a Lua function. Returns this new coroutine, an object with type **\"thread\"**.","parameters":["f"]},{"url":"","name":"resume","base":"coroutine","kind":12,"comment":"Starts or continues the execution of coroutine **co**. The first time you resume a coroutine, it starts running its body. The values **val1**, ... are passed as the arguments to the body function. If the coroutine has yielded, **resume** restarts it; the values **val1**, ... are passed as the results from the yield.","parameters":["co","val1","..."]},{"url":"","name":"running","base":"coroutine","kind":12,"comment":"Returns the running coroutine, or **nil** when called by the main thread.","parameters":[""]},{"url":"","name":"status","base":"coroutine","kind":12,"comment":"Returns the status of coroutine **co**, as a string: **\"running\"**, if the coroutine is running (that is, it called **status**); **\"suspended\"**, if the coroutine is suspended in a call to **yield**, or if it has not started running yet; **\"normal\"** if the coroutine is active but not running (that is, it has resumed another coroutine); and **\"dead\"** if the coroutine has finished its body function, or if it has stopped with an error.","parameters":["co"]},{"url":"","name":"wrap","base":"coroutine","kind":12,"comment":"Creates a new coroutine, with body **f**. **f** must be a Lua function. Returns a function that resumes the coroutine each time it is called. Any arguments passed to the function behave as the extra arguments to **resume**. Returns the same values returned by **resume**, except the first boolean. In case of error, propagates the error.","parameters":["f"]},{"url":"","name":"yield","base":"coroutine","kind":12,"comment":"Suspends the execution of the calling coroutine. The coroutine cannot be running a C function, a metamethod, or an iterator. Any arguments to **yield** are passed as extra results to **resume**.","parameters":["..."]},{"url":"","name":"debug","base":"debug","kind":12,"comment":"Enters an interactive mode with the user, running each string that the user enters. Using simple commands and other debug facilities, the user can inspect global and local variables, change their values, evaluate expressions, and so on. A line containing only the word **cont** finishes this function, so that the caller continues its execution.","parameters":[""]},{"url":"","name":"getfenv","base":"debug","kind":12,"comment":"Returns the environment of object **o**.","parameters":["o"]},{"url":"","name":"gethook","base":"debug","kind":12,"comment":"Returns the current hook settings of the thread, as three values: the current hook function, the current hook mask, and the current hook count (as set by the **debug.sethook** function).","parameters":["thread"]},{"url":"","name":"getinfo","base":"debug","kind":12,"comment":"Returns a table with information about a function. You can give the function directly, or you can give a number as the value of **function**, which means the function running at level **function** of the call stack of the given thread: level 0 is the current function (**getinfo** itself); level 1 is the function that called **getinfo**; and so on. If **function** is a number larger than the number of active functions, then **getinfo** returns **nil**.","parameters":["thread","function","what"]},{"url":"","name":"getlocal","base":"debug","kind":12,"comment":"This function returns the name and the value of the local variable with index **local** of the function at level **level** of the stack. (The first parameter or local variable has index 1, and so on, until the last active local variable.) The function returns **nil** if there is no local variable with the given index, and raises an error when called with a **level** out of range. (You can call **debug.getinfo** to check whether the level is valid.)","parameters":["thread","level","local"]},{"url":"","name":"getmetatable","base":"debug","kind":12,"comment":"Returns the metatable of the given **object** or **nil** if it does not have a metatable.","parameters":["object"]},{"url":"","name":"getregistry","base":"debug","kind":12,"comment":"Returns the registry table (see **&3.5**).","parameters":[""]},{"url":"","name":"getupvalue","base":"debug","kind":12,"comment":"This function returns the name and the value of the upvalue with index **up** of the function **func**. The function returns **nil** if there is no upvalue with the given index.","parameters":["func","up"]},{"url":"","name":"setfenv","base":"debug","kind":12,"comment":"Sets the environment of the given **object** to the given **table**. Returns **object**.","parameters":["object","table"]},{"url":"","name":"sethook","base":"debug","kind":12,"comment":"Sets the given function as a hook. The string **mask** and the number **count** describe when the hook will be called. The string mask may have the following characters, with the given meaning:  ","parameters":["thread","hook","mask","count"]},{"url":"","name":"setlocal","base":"debug","kind":12,"comment":"This function assigns the value **value** to the local variable with index **local** of the function at level **level** of the stack. The function returns **nil** if there is no local variable with the given index, and raises an error when called with a **level** out of range. (You can call **getinfo** to check whether the level is valid.) Otherwise, it returns the name of the local variable.","parameters":["thread","level","local","value"]},{"url":"","name":"setmetatable","base":"debug","kind":12,"comment":"Sets the metatable for the given **object** to the given **table** (which can be **nil**).","parameters":["object","table"]},{"url":"","name":"setupvalue","base":"debug","kind":12,"comment":"This function assigns the value **value** to the upvalue with index **up** of the function **func**. The function returns **nil** if there is no upvalue with the given index. Otherwise, it returns the name of the upvalue.","parameters":["func","up","value"]},{"url":"","name":"traceback","base":"debug","kind":12,"comment":"Returns a string with a traceback of the call stack. An optional **message** string is appended at the beginning of the traceback. An optional **level** number tells at which level to start the traceback (default is 1, the function calling **traceback**).","parameters":["thread","message","level"]},{"url":"","name":"file:close","kind":12,"comment":"Closes **file**. Note that files are automatically closed when their handles are garbage collected, but that takes an unpredictable amount of time to happen.","parameters":[""]},{"url":"","name":"file:flush","kind":12,"comment":"Saves any written data to **file**.","parameters":[""]},{"url":"","name":"file:lines","kind":12,"comment":"Returns an iterator function that, each time it is called, returns a new line from the file. Therefore, the construction  \n\n      for line in file:lines() do body end \n\n will iterate over all lines of the file. (Unlike **io.lines**, this function does not close the file when the loop ends.","parameters":[""]},{"url":"","name":"file:read","kind":12,"comment":"Reads the file **file**, according to the given formats, which specify what to read. For each format, the function returns a string (or a number) with the characters read, or **nil** if it cannot read data with the specified format. When called without formats, it uses a default format that reads the entire next line (see below).","parameters":["..."]},{"url":"","name":"file:seek","kind":12,"comment":"Sets and gets the file position, measured from the beginning of the file, to the position given by **offset** plus a base specified by the string **whence**, as follows:  ","parameters":["whence","offset"]},{"url":"","name":"file:setvbuf","kind":12,"comment":"Sets the buffering mode for an output file. There are three available modes:  ","parameters":["mode","size"]},{"url":"","name":"file:write","kind":12,"comment":"Writes the value of each of its arguments to the **file**. The arguments must be strings or numbers. To write other values, use **string.format** before **write**.","parameters":["..."]},{"url":"","name":"close","base":"io","kind":12,"comment":"Equivalent to **file:close()**. Without a **file**, closes the default output file.","parameters":["file"]},{"url":"","name":"flush","base":"io","kind":12,"comment":"Equivalent to **file:flush** over the default output file.","parameters":[""]},{"url":"","name":"input","base":"io","kind":12,"comment":"When called with a file name, it opens the named file (in text mode), and sets its handle as the default input file. When called with a file handle, it simply sets this file handle as the default input file. When called without parameters, it returns the current default input file.","parameters":["file"]},{"url":"","name":"lines","base":"io","kind":12,"comment":"Opens the given file name in read mode and returns an iterator function that, each time it is called, returns a new line from the file. Therefore, the construction  \n\n      for line in io.lines(filename) do body end \n\n will iterate over all lines of the file. When the iterator function detects the end of file, it returns **nil** (to finish the loop) and automatically closes the file","parameters":["filename"]},{"url":"","name":"open","base":"io","kind":12,"comment":"This function opens a file, in the mode specified in the string **mode**. It returns a new file handle, or, in case of errors, **nil** plus an error message.","parameters":["filename","mode"]},{"url":"","name":"output","base":"io","kind":12,"comment":"Similar to **io.input**, but operates over the default output file.","parameters":["file"]},{"url":"","name":"popen","base":"io","kind":12,"comment":"Starts program **prog** in a separated process and returns a file handle that you can use to read data from this program (if **mode** is **\"r\"**, the default) or to write data to this program (if **mode** is **\"w\"**).","parameters":["prog","mode"]},{"url":"","name":"read","base":"io","kind":12,"comment":"Equivalent to **io.input():read**.","parameters":["..."]},{"url":"","name":"tmpfile","base":"io","kind":12,"comment":"Returns a handle for a temporary file. This file is opened in update mode and it is automatically removed when the program ends.","parameters":[""]},{"url":"","name":"type","base":"io","kind":12,"comment":"Checks whether **obj** is a valid file handle. Returns the string **\"file\"** if **obj** is an open file handle, **\"closed file\"** if **obj** is a closed file handle, or **nil** if **obj** is not a file handle.","parameters":["obj"]},{"url":"","name":"write","base":"io","kind":12,"comment":"Equivalent to **io.output():write**.","parameters":["..."]},{"url":"","name":"abs","base":"math","kind":12,"comment":"Returns the absolute value of **x**.","parameters":["x"]},{"url":"","name":"acos","base":"math","kind":12,"comment":"Returns the arc cosine of **x** (in radians).","parameters":["x"]},{"url":"","name":"asin","base":"math","kind":12,"comment":"Returns the arc sine of **x** (in radians).","parameters":["x"]},{"url":"","name":"atan","base":"math","kind":12,"comment":"Returns the arc tangent of **x** (in radians).","parameters":["x"]},{"url":"","name":"atan2","base":"math","kind":12,"comment":"Returns the arc tangent of **y/x** (in radians), but uses the signs of both parameters to find the quadrant of the result. (It also handles correctly the case of **x** being zero.)","parameters":["y","x"]},{"url":"","name":"ceil","base":"math","kind":12,"comment":"Returns the smallest integer larger than or equal to **x**.","parameters":["x"]},{"url":"","name":"cos","base":"math","kind":12,"comment":"Returns the cosine of **x** (assumed to be in radians).","parameters":["x"]},{"url":"","name":"cosh","base":"math","kind":12,"comment":"Returns the hyperbolic cosine of **x**.","parameters":["x"]},{"url":"","name":"deg","base":"math","kind":12,"comment":"Returns the angle **x** (given in radians) in degrees.","parameters":["x"]},{"url":"","name":"exp","base":"math","kind":12,"comment":"Returns the value e^x.","parameters":["x"]},{"url":"","name":"floor","base":"math","kind":12,"comment":"Returns the largest integer smaller than or equal to **x**.","parameters":["x"]},{"url":"","name":"fmod","base":"math","kind":12,"comment":"Returns the remainder of the division of **x** by **y** that rounds the quotient towards zero.","parameters":["x","y"]},{"url":"","name":"frexp","base":"math","kind":12,"comment":"Returns **m** and **e** such that x = m2^e, **e** is an integer and the absolute value of **m** is in the range [0.5, 1) (or zero when **x** is zero).","parameters":["x"]},{"url":"","name":"huge","base":"math","kind":13,"comment":"The value **HUGE_VAL**, a value larger than or equal to any other numerical value."},{"url":"","name":"ldexp","base":"math","kind":12,"comment":"Returns m2^e (**e** should be an integer).","parameters":["m","e"]},{"url":"","name":"log","base":"math","kind":12,"comment":"Returns the natural logarithm of **x**.","parameters":["x"]},{"url":"","name":"log10","base":"math","kind":12,"comment":"Returns the base-10 logarithm of **x**.","parameters":["x"]},{"url":"","name":"max","base":"math","kind":12,"comment":"Returns the maximum value among its arguments.","parameters":["x","..."]},{"url":"","name":"min","base":"math","kind":12,"comment":"Returns the minimum value among its arguments.","parameters":["x","..."]},{"url":"","name":"modf","base":"math","kind":12,"comment":"Returns two numbers, the integral part of **x** and the fractional part of **x**.","parameters":["x"]},{"url":"","name":"pi","base":"math","kind":13,"comment":"The value of pi."},{"url":"","name":"pow","base":"math","kind":12,"comment":"Returns x^y. (You can also use the expression **x^y** to compute this value.)","parameters":["x","y"]},{"url":"","name":"rad","base":"math","kind":12,"comment":"Returns the angle **x** (given in degrees) in radians.","parameters":["x"]},{"url":"","name":"random","base":"math","kind":12,"comment":"This function is an interface to the simple pseudo-random generator function **rand** provided by ANSI C. (No guarantees can be given for its statistical properties.)","parameters":["m","n"]},{"url":"","name":"randomseed","base":"math","kind":12,"comment":"Sets **x** as the \"seed\" for the pseudo-random generator: equal seeds produce equal sequences of numbers.","parameters":["x"]},{"url":"","name":"sin","base":"math","kind":12,"comment":"Returns the sine of **x** (assumed to be in radians).","parameters":["x"]},{"url":"","name":"sinh","base":"math","kind":12,"comment":"Returns the hyperbolic sine of **x**.","parameters":["x"]},{"url":"","name":"sqrt","base":"math","kind":12,"comment":"Returns the square root of **x**. (You can also use the expression **x^0.5** to compute this value.)","parameters":["x"]},{"url":"","name":"tan","base":"math","kind":12,"comment":"Returns the tangent of **x** (assumed to be in radians).","parameters":["x"]},{"url":"","name":"tanh","base":"math","kind":12,"comment":"Returns the hyperbolic tangent of **x**.","parameters":["x"]},{"url":"","name":"clock","base":"os","kind":12,"comment":"Returns an approximation of the amount in seconds of CPU time used by the program.","parameters":[""]},{"url":"","name":"date","base":"os","kind":12,"comment":"Returns a string or a table containing date and time, formatted according to the given string **format**.","parameters":["format","time"]},{"url":"","name":"difftime","base":"os","kind":12,"comment":"Returns the number of seconds from time **t1** to time **t2**. In POSIX, Windows, and some other systems, this value is exactly **t2**-**t1**.","parameters":["t2","t1"]},{"url":"","name":"execute","base":"os","kind":12,"comment":"This function is equivalent to the C function **system**. It passes **command** to be executed by an operating system shell. It returns a status code, which is system-dependent. If **command** is absent, then it returns nonzero if a shell is available and zero otherwise.","parameters":["command"]},{"url":"","name":"exit","base":"os","kind":12,"comment":"Calls the C function **exit**, with an optional **code**, to terminate the host program. The default value for **code** is the success code.","parameters":["code"]},{"url":"","name":"getenv","base":"os","kind":12,"comment":"Returns the value of the process environment variable **varname**, or **nil** if the variable is not defined.","parameters":["varname"]},{"url":"","name":"remove","base":"os","kind":12,"comment":"Deletes the file or directory with the given name. Directories must be empty to be removed. If this function fails, it returns **nil**, plus a string describing the error.","parameters":["filename"]},{"url":"","name":"rename","base":"os","kind":12,"comment":"Renames file or directory named **oldname** to **newname**. If this function fails, it returns **nil**, plus a string describing the error.","parameters":["oldname","newname"]},{"url":"","name":"setlocale","base":"os","kind":12,"comment":"Sets the current locale of the program. **locale** is a string specifying a locale; **category** is an optional string describing which category to change: **\"all\"**, **\"collate\"**, **\"ctype\"**, **\"monetary\"**, **\"numeric\"**, or **\"time\"**; the default category is **\"all\"**. The function returns the name of the new locale, or **nil** if the request cannot be honored.","parameters":["locale","category"]},{"url":"","name":"time","base":"os","kind":12,"comment":"Returns the current time when called without arguments, or a time representing the date and time specified by the given table. This table must have fields **year**, **month**, and **day**, and may have fields **hour**, **min**, **sec**, and **isdst** (for a description of these fields, see the **os.date** function).","parameters":["table"]},{"url":"","name":"tmpname","base":"os","kind":12,"comment":"Returns a string with a file name that can be used for a temporary file. The file must be explicitly opened before its use and explicitly removed when no longer needed.","parameters":[""]},{"url":"","name":"cpath","base":"package","kind":13,"comment":"The path used by **require** to search for a C loader."},{"url":"","name":"loaded","base":"package","kind":13,"comment":"A table used by **require** simply returns the value stored there."},{"url":"","name":"loaders","base":"package","kind":13,"comment":"A table used by **require** to control how to load modules."},{"url":"","name":"loadlib","base":"package","kind":12,"comment":"Dynamically links the host program with the C library **libname**. Inside this library, looks for a function **funcname** and returns this function as a C function. (So, **funcname** must follow the protocol (see **lua_CFunction**)).","parameters":["libname","funcname"]},{"url":"","name":"path","base":"package","kind":13,"comment":"The path used by **require** to search for a Lua loader."},{"url":"","name":"preload","base":"package","kind":13,"comment":"A table to store loaders for specific modules (see **require**)."},{"url":"","name":"seeall","base":"package","kind":12,"comment":"Sets a metatable for **module** with its **__index** field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function **module**.","parameters":["module"]},{"url":"","name":"byte","base":"string","kind":12,"comment":"Returns the internal numerical codes of the characters **s[i]**, **s[i+1]**, ..., **s[j]**. The default value for **i** is 1; the default value for **j** is **i**.","parameters":["s","i","j"]},{"url":"","name":"char","base":"string","kind":12,"comment":"Receives zero or more integers. Returns a string with length equal to the number of arguments, in which each character has the internal numerical code equal to its corresponding argument.","parameters":["..."]},{"url":"","name":"dump","base":"string","kind":12,"comment":"Returns a string containing a binary representation of the given function, so that a later **loadstring** on this string returns a copy of the function. **function** must be a Lua function without upvalues.","parameters":["function"]},{"url":"","name":"find","base":"string","kind":12,"comment":"Looks for the first match of **pattern** in the string **s**. If it finds a match, then **find** returns the indices of **s** where this occurrence starts and ends; otherwise, it returns **nil**. A third, optional numerical argument **init** specifies where to start the search; its default value is 1 and can be negative. A value of **true** as a fourth, optional argument **plain** turns off the pattern matching facilities, so the function does a plain \"find substring\" operation, with no characters in **pattern** being considered \"magic\". Note that if **plain** is given, then **init** must be given as well.","parameters":["s","pattern","init","plain"]},{"url":"","name":"format","base":"string","kind":12,"comment":"Returns a formatted version of its variable number of arguments following the description given in its first argument (which must be a string). The format string follows the same rules as the **printf** family of standard C functions. The only differences are that the options/modifiers __*__, **l**, **L**, **n**, **p**, and **h** are not supported and that there is an extra option, **q**. The **q** option formats a string in a form suitable to be safely read back by the Lua interpreter: the string is written between double quotes, and all double quotes, newlines, embedded zeros, and backslashes in the string are correctly escaped when written. For instance, the call  \n\n      string.format('%q', 'a string with \"quotes\" and \\n new line') \n\n will produce the string","parameters":["formatstring","..."]},{"url":"","name":"gmatch","base":"string","kind":12,"comment":"Returns an iterator function that, each time it is called, returns the next captures from **pattern** over string **s**. If **pattern** specifies no captures, then the whole match is produced in each call.","parameters":["s","pattern"]},{"url":"","name":"gsub","base":"string","kind":12,"comment":"Returns a copy of **s** in which all (or the first **n**, if given) occurrences of the **pattern** have been replaced by a replacement string specified by **repl**, which can be a string, a table, or a function. **gsub** also returns, as its second value, the total number of matches that occurred.","parameters":["s","pattern","repl","n"]},{"url":"","name":"len","base":"string","kind":12,"comment":"Receives a string and returns its length. The empty string **\"\"** has length 0. Embedded zeros are counted, so **\"a\\000bc\\000\"** has length 5.","parameters":["s"]},{"url":"","name":"lower","base":"string","kind":12,"comment":"Receives a string and returns a copy of this string with all uppercase letters changed to lowercase. All other characters are left unchanged. The definition of what an uppercase letter is depends on the current locale.","parameters":["s"]},{"url":"","name":"match","base":"string","kind":12,"comment":"Looks for the first match of **pattern** in the string **s**. If it finds one, then **match** returns the captures from the pattern; otherwise it returns **nil**. If **pattern** specifies no captures, then the whole match is returned. A third, optional numerical argument **init** specifies where to start the search; its default value is 1 and can be negative.","parameters":["s","pattern","init"]},{"url":"","name":"rep","base":"string","kind":12,"comment":"Returns a string that is the concatenation of **n** copies of the string **s**.","parameters":["s","n"]},{"url":"","name":"reverse","base":"string","kind":12,"comment":"Returns a string that is the string **s** reversed.","parameters":["s"]},{"url":"","name":"sub","base":"string","kind":12,"comment":"Returns the substring of **s** that starts at **i**  and continues until **j**; **i** and **j** can be negative. If **j** is absent, then it is assumed to be equal to -1 (which is the same as the string length). In particular, the call **string.sub(s,1,j)** returns a prefix of **s** with length **j**, and **string.sub(s, -i)** returns a suffix of **s** with length **i**.","parameters":["s","i","j"]},{"url":"","name":"upper","base":"string","kind":12,"comment":"Receives a string and returns a copy of this string with all lowercase letters changed to uppercase. All other characters are left unchanged. The definition of what a lowercase letter is depends on the current locale.","parameters":["s"]},{"url":"","name":"concat","base":"table","kind":12,"comment":"Given an array where all elements are strings or numbers, returns **table[i]..sep..table[i+1] ... sep..table[j]**. The default value for **sep** is the empty string, the default for **i** is 1, and the default for **j** is the length of the table. If **i** is greater than **j**, returns the empty string.","parameters":["table","sep","i","j"]},{"url":"","name":"insert","base":"table","kind":12,"comment":"Inserts element **value** at position **pos** in **table**, shifting up other elements to open space, if necessary. The default value for **pos** is **n+1**, where **n** is the length of the table (see **&2.5.5**), so that a call **table.insert(t,x)** inserts **x** at the end of table **t**.","parameters":["table","pos","value"]},{"url":"","name":"maxn","base":"table","kind":12,"comment":"Returns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices. (To do its job this function does a linear traversal of the whole table.) ","parameters":["table"]},{"url":"","name":"remove","base":"table","kind":12,"comment":"Removes from **table** the element at position **pos**, shifting down other elements to close the space, if necessary. Returns the value of the removed element. The default value for **pos** is **n**, where **n** is the length of the table, so that a call **table.remove(t)** removes the last element of table **t**.","parameters":["table","pos"]},{"url":"","name":"sort","base":"table","kind":12,"comment":"Sorts table elements in a given order, in-place, from **table[1]** to **table[n]**, where **n** is the length of the table. If **comp** is given, then it must be a function that receives two table elements, and returns true when the first is less than the second (so that **not comp(a[i+1],a[i])** will be true after the sort). If **comp** is not given, then the standard Lua operator **<** is used instead.","parameters":["table","comp"]}]