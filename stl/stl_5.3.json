[{"url":"","name":"_G","kind":3,"comment":"A global variable (not a function) that holds the global environment (see **&2.2**). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa."},{"url":"","name":"_VERSION","kind":13,"comment":"A global variable (not a function) that holds a string containing the running Lua version. The current value of this variable is \"**Lua 5.3**\"."},{"url":"","name":"assert","kind":12,"comment":"Calls ****error**** if the value of its argument **v** is false (i.e., **nil** or **false**); otherwise, returns all its arguments. In case of error, **message** is the error object; when absent, it defaults to \"**assertion failed!**\"","parameters":["v","message"]},{"url":"","name":"collectgarbage","kind":12,"comment":"This function is a generic interface to the garbage collector. It performs different functions according to its first argument, **opt**:  ","parameters":["opt","arg"]},{"url":"","name":"dofile","kind":12,"comment":"Opens the named file and executes its contents as a Lua chunk. When called without arguments, **dofile** executes the contents of the standard input (**stdin**). Returns all values returned by the chunk. In case of errors, **dofile** propagates the error to its caller (that is, **dofile** does not run in protected mode).","parameters":["filename"]},{"url":"","name":"error","kind":12,"comment":"Terminates the last protected function called and returns **message** as the error object. Function **error** never returns.","parameters":["message","level"]},{"url":"","name":"getmetatable","kind":12,"comment":"If **object** does not have a metatable, returns **nil**. Otherwise, if the object's metatable has a **__metatable** field, returns the associated value. Otherwise, returns the metatable of the given object.","parameters":["object"]},{"url":"","name":"ipairs","kind":12,"comment":"Returns three values (an iterator function, the table **t**, and 0) so that the construction  \n\n      for i,v in ipairs(t) do body end \n\n will iterate over the key-value pairs (**1,t[1]**), (**2,t[2]**), ..., up to the first nil value","parameters":["t"]},{"url":"","name":"load","kind":12,"comment":"Loads a chunk.","parameters":["chunk","chunkname","mode","env"]},{"url":"","name":"loadfile","kind":12,"comment":"Similar to ****load****, but gets the chunk from file **filename** or from the standard input, if no file name is given.","parameters":["filename","mode","env"]},{"url":"","name":"next","kind":12,"comment":"Allows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. **next** returns the next index of the table and its associated value. When called with **nil** as its second argument, **next** returns an initial index and its associated value. When called with the last index, or with **nil** in an empty table, **next** returns **nil**. If the second argument is absent, then it is interpreted as **nil**. In particular, you can use **next(t)** to check whether a table is empty.","parameters":["table","index"]},{"url":"","name":"pairs","kind":12,"comment":"If **t** has a metamethod **__pairs**, calls it with **t** as argument and returns the first three results from the call.","parameters":["t"]},{"url":"","name":"pcall","kind":12,"comment":"Calls function **f** with the given arguments in protected mode. This means that any error inside **f** is not propagated; instead, **pcall** catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, **pcall** also returns all results from the call, after this first result. In case of any error, **pcall** returns **false** plus the error message.","parameters":["f","arg1","..."]},{"url":"","name":"print","kind":12,"comment":"Receives any number of arguments and prints their values to **stdout**, using the ****io.write****.","parameters":["..."]},{"url":"","name":"rawequal","kind":12,"comment":"Checks whether **v1** is equal to **v2**, without invoking the **__eq** metamethod. Returns a boolean.","parameters":["v1","v2"]},{"url":"","name":"rawget","kind":12,"comment":"Gets the real value of **table[index]**, without invoking the **__index** metamethod. **table** must be a table; **index** may be any value.","parameters":["table","index"]},{"url":"","name":"rawlen","kind":12,"comment":"Returns the length of the object **v**, which must be a table or a string, without invoking the **__len** metamethod. Returns an integer.","parameters":["v"]},{"url":"","name":"rawset","kind":12,"comment":"Sets the real value of **table[index]** to **value**, without invoking the **__newindex** metamethod. **table** must be a table, **index** any value different from **nil** and NaN, and **value** any Lua value.","parameters":["table","index","value"]},{"url":"","name":"require","kind":12,"comment":"Loads the given module. The function starts by looking into the ****package.loaded**** table to determine whether **modname** is already loaded. If it is, then **require** returns the value stored at **package.loaded[modname]**. Otherwise, it tries to find a loader for the module.","parameters":["modname"]},{"url":"","name":"select","kind":12,"comment":"If **index** is a number, returns all arguments after argument number **index**; a negative number indexes from the end (-1 is the last argument). Otherwise, **index** must be the string **\"#\"**, and **select** returns the total number of extra arguments it received.","parameters":["index","..."]},{"url":"","name":"setmetatable","kind":12,"comment":"Sets the metatable for the given table. (To change the metatable of other types from Lua code, you must use the debug library (**&6.10**).) If **metatable** is **nil**, removes the metatable of the given table. If the original metatable has a **__metatable** field, raises an error.","parameters":["table","metatable"]},{"url":"","name":"tonumber","kind":12,"comment":"When called with no **base**, **tonumber** tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then **tonumber** returns this number; otherwise, it returns **nil**.","parameters":["e","base"]},{"url":"","name":"tostring","kind":12,"comment":"Receives a value of any type and converts it to a string in a human-readable format. (For complete control of how numbers are converted, use ****string.format****.)","parameters":["v"]},{"url":"","name":"type","kind":12,"comment":"Returns the type of its only argument, coded as a string. The possible results of this function are \"**nil**\" (a string, not the value **nil**), \"**number**\", \"**string**\", \"**boolean**\", \"**table**\", \"**function**\", \"**thread**\", and \"**userdata**\".","parameters":["v"]},{"url":"","name":"xpcall","kind":12,"comment":"This function is similar to ****pcall****, except that it sets a new message handler **msgh**.","parameters":["f","msgh","arg1","..."]},{"url":"","name":"coroutine","kind":3,"comment":"This library comprises the operations to manipulate coroutines, which come inside the table **&2.6** for a general description of coroutines."},{"url":"","name":"create","base":"coroutine","kind":12,"comment":"Creates a new coroutine, with body **f**. **f** must be a function. Returns this new coroutine, an object with type **\"thread\"**.","parameters":["f"]},{"url":"","name":"isyieldable","base":"coroutine","kind":12,"comment":"Returns true when the running coroutine can yield.","parameters":[""]},{"url":"","name":"resume","base":"coroutine","kind":12,"comment":"Starts or continues the execution of coroutine **co**. The first time you resume a coroutine, it starts running its body. The values **val1**, ... are passed as the arguments to the body function. If the coroutine has yielded, **resume** restarts it; the values **val1**, ... are passed as the results from the yield.","parameters":["co","val1","..."]},{"url":"","name":"running","base":"coroutine","kind":12,"comment":"Returns the running coroutine plus a boolean, true when the running coroutine is the main one.","parameters":[""]},{"url":"","name":"status","base":"coroutine","kind":12,"comment":"Returns the status of coroutine **co**, as a string: **\"running\"**, if the coroutine is running (that is, it called **status**); **\"suspended\"**, if the coroutine is suspended in a call to **yield**, or if it has not started running yet; **\"normal\"** if the coroutine is active but not running (that is, it has resumed another coroutine); and **\"dead\"** if the coroutine has finished its body function, or if it has stopped with an error.","parameters":["co"]},{"url":"","name":"wrap","base":"coroutine","kind":12,"comment":"Creates a new coroutine, with body **f**. **f** must be a function. Returns a function that resumes the coroutine each time it is called. Any arguments passed to the function behave as the extra arguments to **resume**. Returns the same values returned by **resume**, except the first boolean. In case of error, propagates the error.","parameters":["f"]},{"url":"","name":"yield","base":"coroutine","kind":12,"comment":"Suspends the execution of the calling coroutine. Any arguments to **yield** are passed as extra results to **resume**.","parameters":["..."]},{"url":"","name":"debug","kind":3,"comment":"This library provides the functionality of the debug interface (**&4.9**) to Lua programs. You should exert care when using this library. Several of its functions violate basic assumptions about Lua code (e.g., that variables local to a function cannot be accessed from outside; that userdata metatables cannot be changed by Lua code; that Lua programs do not crash) and therefore can compromise otherwise secure code. Moreover, some functions in this library may be slow."},{"url":"","name":"debug","base":"debug","kind":12,"comment":"Enters an interactive mode with the user, running each string that the user enters. Using simple commands and other debug facilities, the user can inspect global and local variables, change their values, evaluate expressions, and so on. A line containing only the word **cont** finishes this function, so that the caller continues its execution.","parameters":[""]},{"url":"","name":"gethook","base":"debug","kind":12,"comment":"Returns the current hook settings of the thread, as three values: the current hook function, the current hook mask, and the current hook count (as set by the ****debug.sethook**** function).","parameters":["thread"]},{"url":"","name":"getinfo","base":"debug","kind":12,"comment":"Returns a table with information about a function. You can give the function directly or you can give a number as the value of **f**, which means the function running at level **f** of the call stack of the given thread: level 0 is the current function (**getinfo** itself); level 1 is the function that called **getinfo** (except for tail calls, which do not count on the stack); and so on. If **f** is a number larger than the number of active functions, then **getinfo** returns **nil**.","parameters":["thread","f","what"]},{"url":"","name":"getlocal","base":"debug","kind":12,"comment":"This function returns the name and the value of the local variable with index **local** of the function at level **f** of the stack. This function accesses not only explicit local variables, but also parameters, temporaries, etc.","parameters":["thread","f","local"]},{"url":"","name":"getmetatable","base":"debug","kind":12,"comment":"Returns the metatable of the given **value** or **nil** if it does not have a metatable.","parameters":["value"]},{"url":"","name":"getregistry","base":"debug","kind":12,"comment":"Returns the registry table (see **&4.5**).","parameters":[""]},{"url":"","name":"getupvalue","base":"debug","kind":12,"comment":"This function returns the name and the value of the upvalue with index **up** of the function **f**. The function returns **nil** if there is no upvalue with the given index.","parameters":["f","up"]},{"url":"","name":"getuservalue","base":"debug","kind":12,"comment":"Returns the Lua value associated to **u**. If **u** is not a full userdata, returns **nil**.","parameters":["u"]},{"url":"","name":"sethook","base":"debug","kind":12,"comment":"Sets the given function as a hook. The string **mask** and the number **count** describe when the hook will be called. The string mask may have any combination of the following characters, with the given meaning:  ","parameters":["thread","hook","mask","count"]},{"url":"","name":"setlocal","base":"debug","kind":12,"comment":"This function assigns the value **value** to the local variable with index **local** of the function at level **level** of the stack. The function returns **nil** if there is no local variable with the given index, and raises an error when called with a **level** out of range. (You can call **getinfo** to check whether the level is valid.) Otherwise, it returns the name of the local variable.","parameters":["thread","level","local","value"]},{"url":"","name":"setmetatable","base":"debug","kind":12,"comment":"Sets the metatable for the given **value** to the given **table** (which can be **nil**). Returns **value**.","parameters":["value","table"]},{"url":"","name":"setupvalue","base":"debug","kind":12,"comment":"This function assigns the value **value** to the upvalue with index **up** of the function **f**. The function returns **nil** if there is no upvalue with the given index. Otherwise, it returns the name of the upvalue.","parameters":["f","up","value"]},{"url":"","name":"setuservalue","base":"debug","kind":12,"comment":"Sets the given **value** as the Lua value associated to the given **udata**. **udata** must be a full userdata.","parameters":["udata","value"]},{"url":"","name":"traceback","base":"debug","kind":12,"comment":"If **message** is present but is neither a string nor **nil**, this function returns **message** without further processing. Otherwise, it returns a string with a traceback of the call stack. The optional **message** string is appended at the beginning of the traceback. An optional **level** number tells at which level to start the traceback (default is 1, the function calling **traceback**).","parameters":["thread","message","level"]},{"url":"","name":"upvalueid","base":"debug","kind":12,"comment":"Returns a unique identifier (as a light userdata) for the upvalue numbered **n** from the given function.","parameters":["f","n"]},{"url":"","name":"upvaluejoin","base":"debug","kind":12,"comment":"Make the **n1**-th upvalue of the Lua closure **f1** refer to the **n2**-th upvalue of the Lua closure **f2**.","parameters":["f1","n1","f2","n2"]},{"url":"","name":"io","kind":3,"comment":"The I/O library provides two different styles for file manipulation. The first one uses implicit file handles; that is, there are operations to set a default input file and a default output file, and all input/output operations are over these default files. The second style uses explicit file handles."},{"url":"","name":"close","base":"io","kind":12,"comment":"Equivalent to **file:close()**. Without a **file**, closes the default output file.","parameters":["file"]},{"url":"","name":"flush","base":"io","kind":12,"comment":"Equivalent to **io.output():flush()**.","parameters":[""]},{"url":"","name":"input","base":"io","kind":12,"comment":"When called with a file name, it opens the named file (in text mode), and sets its handle as the default input file. When called with a file handle, it simply sets this file handle as the default input file. When called without arguments, it returns the current default input file.","parameters":["file"]},{"url":"","name":"lines","base":"io","kind":12,"comment":"Opens the given file name in read mode and returns an iterator function that works like **file:lines(...)** over the opened file. When the iterator function detects the end of file, it returns no values (to finish the loop) and automatically closes the file.","parameters":["filename","..."]},{"url":"","name":"open","base":"io","kind":12,"comment":"This function opens a file, in the mode specified in the string **mode**. In case of success, it returns a new file handle.","parameters":["filename","mode"]},{"url":"","name":"output","base":"io","kind":12,"comment":"Similar to ****io.input****, but operates over the default output file.","parameters":["file"]},{"url":"","name":"popen","base":"io","kind":12,"comment":"This function is system dependent and is not available on all platforms.","parameters":["prog","mode"]},{"url":"","name":"read","base":"io","kind":12,"comment":"Equivalent to **io.input():read(...)**.","parameters":["..."]},{"url":"","name":"tmpfile","base":"io","kind":12,"comment":"In case of success, returns a handle for a temporary file. This file is opened in update mode and it is automatically removed when the program ends.","parameters":[""]},{"url":"","name":"type","base":"io","kind":12,"comment":"Checks whether **obj** is a valid file handle. Returns the string **\"file\"** if **obj** is an open file handle, **\"closed file\"** if **obj** is a closed file handle, or **nil** if **obj** is not a file handle.","parameters":["obj"]},{"url":"","name":"write","base":"io","kind":12,"comment":"Equivalent to **io.output():write(...)**.","parameters":["..."]},{"url":"","name":"file:close","kind":12,"comment":"Closes **file**. Note that files are automatically closed when their handles are garbage collected, but that takes an unpredictable amount of time to happen.","parameters":[""]},{"url":"","name":"file:flush","kind":12,"comment":"Saves any written data to **file**.","parameters":[""]},{"url":"","name":"file:lines","kind":12,"comment":"Returns an iterator function that, each time it is called, reads the file according to the given formats. When no format is given, uses \"**l**\" as a default. As an example, the construction  \n\n      for c in file:lines(1) do body end \n\n will iterate over all characters of the file, starting at the current position. Unlike ****io.lines****, this function does not close the file when the loop ends","parameters":["..."]},{"url":"","name":"file:read","kind":12,"comment":"Reads the file **file**, according to the given formats, which specify what to read. For each format, the function returns a string or a number with the characters read, or **nil** if it cannot read data with the specified format. (In this latter case, the function does not read subsequent formats.) When called without formats, it uses a default format that reads the next line (see below).","parameters":["..."]},{"url":"","name":"file:seek","kind":12,"comment":"Sets and gets the file position, measured from the beginning of the file, to the position given by **offset** plus a base specified by the string **whence**, as follows:  ","parameters":["whence","offset"]},{"url":"","name":"file:setvbuf","kind":12,"comment":"Sets the buffering mode for an output file. There are three available modes:  ","parameters":["mode","size"]},{"url":"","name":"file:write","kind":12,"comment":"Writes the value of each of its arguments to **file**. The arguments must be strings or numbers.","parameters":["..."]},{"url":"","name":"math","kind":3,"comment":"This library provides basic mathematical functions. It provides all its functions and constants inside the table ****math.modf****) return an integer when the result fits in the range of an integer, or a float otherwise."},{"url":"","name":"abs","base":"math","kind":12,"comment":"Returns the absolute value of **x**. (integer/float)","parameters":["x"]},{"url":"","name":"acos","base":"math","kind":12,"comment":"Returns the arc cosine of **x** (in radians).","parameters":["x"]},{"url":"","name":"asin","base":"math","kind":12,"comment":"Returns the arc sine of **x** (in radians).","parameters":["x"]},{"url":"","name":"atan","base":"math","kind":12,"comment":" Returns the arc tangent of **y/x** (in radians), but uses the signs of both arguments to find the quadrant of the result. (It also handles correctly the case of **x** being zero.","parameters":["y","x"]},{"url":"","name":"ceil","base":"math","kind":12,"comment":"Returns the smallest integral value larger than or equal to **x**.","parameters":["x"]},{"url":"","name":"cos","base":"math","kind":12,"comment":"Returns the cosine of **x** (assumed to be in radians).","parameters":["x"]},{"url":"","name":"deg","base":"math","kind":12,"comment":"Converts the angle **x** from radians to degrees.","parameters":["x"]},{"url":"","name":"exp","base":"math","kind":12,"comment":"Returns the value e^x (where **e** is the base of natural logarithms).","parameters":["x"]},{"url":"","name":"floor","base":"math","kind":12,"comment":"Returns the largest integral value smaller than or equal to **x**.","parameters":["x"]},{"url":"","name":"fmod","base":"math","kind":12,"comment":"Returns the remainder of the division of **x** by **y** that rounds the quotient towards zero. (integer/float)","parameters":["x","y"]},{"url":"","name":"huge","base":"math","kind":13,"comment":"The float value **HUGE_VAL**, a value larger than any other numeric value."},{"url":"","name":"log","base":"math","kind":12,"comment":"Returns the logarithm of **x** in the given base. The default for **base** is e (so that the function returns the natural logarithm of **x**).","parameters":["x","base"]},{"url":"","name":"max","base":"math","kind":12,"comment":"Returns the argument with the maximum value, according to the Lua operator **&lt;**. (integer/float)","parameters":["x","..."]},{"url":"","name":"maxinteger","base":"math","kind":13,"comment":"An integer with the maximum value for an integer."},{"url":"","name":"min","base":"math","kind":12,"comment":"Returns the argument with the minimum value, according to the Lua operator **&lt;**. (integer/float)","parameters":["x","..."]},{"url":"","name":"mininteger","base":"math","kind":13,"comment":"An integer with the minimum value for an integer."},{"url":"","name":"modf","base":"math","kind":12,"comment":"Returns the integral part of **x** and the fractional part of **x**. Its second result is always a float.","parameters":["x"]},{"url":"","name":"pi","base":"math","kind":13,"comment":"The value of &pi;."},{"url":"","name":"rad","base":"math","kind":12,"comment":"Converts the angle **x** from degrees to radians.","parameters":["x"]},{"url":"","name":"random","base":"math","kind":12,"comment":"When called without arguments, returns a pseudo-random float with uniform distribution in the range  [0,1).   When called with two integers **m** and **n**, **math.random** returns a pseudo-random integer with uniform distribution in the range [m, n]. (The value n-m cannot be negative and must fit in a Lua integer.) The call **math.random(n)** is equivalent to **math.random(1,n)**.","parameters":["m","n"]},{"url":"","name":"randomseed","base":"math","kind":12,"comment":"Sets **x** as the \"seed\" for the pseudo-random generator: equal seeds produce equal sequences of numbers.","parameters":["x"]},{"url":"","name":"sin","base":"math","kind":12,"comment":"Returns the sine of **x** (assumed to be in radians).","parameters":["x"]},{"url":"","name":"sqrt","base":"math","kind":12,"comment":"Returns the square root of **x**. (You can also use the expression **x^0.5** to compute this value.)","parameters":["x"]},{"url":"","name":"tan","base":"math","kind":12,"comment":"Returns the tangent of **x** (assumed to be in radians).","parameters":["x"]},{"url":"","name":"tointeger","base":"math","kind":12,"comment":"If the value **x** is convertible to an integer, returns that integer. Otherwise, returns **nil**.","parameters":["x"]},{"url":"","name":"type","base":"math","kind":12,"comment":"Returns \"**integer**\" if **x** is an integer, \"**float**\" if it is a float, or **nil** if **x** is not a number.","parameters":["x"]},{"url":"","name":"ult","base":"math","kind":12,"comment":"Returns a boolean, true if and only if integer **m** is below integer **n** when they are compared as unsigned integers.","parameters":["m","n"]},{"url":"","name":"os","kind":3,"comment":"This library is implemented through table ****os****."},{"url":"","name":"clock","base":"os","kind":12,"comment":"Returns an approximation of the amount in seconds of CPU time used by the program.","parameters":[""]},{"url":"","name":"date","base":"os","kind":12,"comment":"Returns a string or a table containing date and time, formatted according to the given string **format**.","parameters":["format","time"]},{"url":"","name":"difftime","base":"os","kind":12,"comment":"Returns the difference, in seconds, from time **t1** to time **t2** (where the times are values returned by ****os.time****). In POSIX, Windows, and some other systems, this value is exactly **t2**-**t1**.","parameters":["t2","t1"]},{"url":"","name":"execute","base":"os","kind":12,"comment":"This function is equivalent to the ISO C function **system**. It passes **command** to be executed by an operating system shell. Its first result is **true** if the command terminated successfully, or **nil** otherwise. After this first result the function returns a string plus a number, as follows:  ","parameters":["command"]},{"url":"","name":"exit","base":"os","kind":12,"comment":"Calls the ISO C function **exit** to terminate the host program. If **code** is **true**, the returned status is **EXIT_SUCCESS**; if **code** is **false**, the returned status is **EXIT_FAILURE**; if **code** is a number, the returned status is this number. The default value for **code** is **true**.","parameters":["code","close"]},{"url":"","name":"getenv","base":"os","kind":12,"comment":"Returns the value of the process environment variable **varname**, or **nil** if the variable is not defined.","parameters":["varname"]},{"url":"","name":"remove","base":"os","kind":12,"comment":"Deletes the file (or empty directory, on POSIX systems) with the given name. If this function fails, it returns **nil**, plus a string describing the error and the error code. Otherwise, it returns true.","parameters":["filename"]},{"url":"","name":"rename","base":"os","kind":12,"comment":"Renames the file or directory named **oldname** to **newname**. If this function fails, it returns **nil**, plus a string describing the error and the error code. Otherwise, it returns true.","parameters":["oldname","newname"]},{"url":"","name":"setlocale","base":"os","kind":12,"comment":"Sets the current locale of the program. **locale** is a system-dependent string specifying a locale; **category** is an optional string describing which category to change: **\"all\"**, **\"collate\"**, **\"ctype\"**, **\"monetary\"**, **\"numeric\"**, or **\"time\"**; the default category is **\"all\"**. The function returns the name of the new locale, or **nil** if the request cannot be honored.","parameters":["locale","category"]},{"url":"","name":"time","base":"os","kind":12,"comment":"Returns the current time when called without arguments, or a time representing the local date and time specified by the given table. This table must have fields **year**, **month**, and **day**, and may have fields **hour** (default is 12), **min** (default is 0), **sec** (default is 0), and **isdst** (default is **nil**). Other fields are ignored. For a description of these fields, see the ****os.date**** function.","parameters":["table"]},{"url":"","name":"tmpname","base":"os","kind":12,"comment":"Returns a string with a file name that can be used for a temporary file. The file must be explicitly opened before its use and explicitly removed when no longer needed.","parameters":[""]},{"url":"","name":"package","kind":3,"comment":"The package library provides basic facilities for loading modules in Lua. It exports one function directly in the global environment: ****package****."},{"url":"","name":"config","base":"package","kind":13,"comment":"A string describing some compile-time configurations for packages. This string is a sequence of lines:  "},{"url":"","name":"cpath","base":"package","kind":13,"comment":"The path used by ****require**** to search for a C loader."},{"url":"","name":"loaded","base":"package","kind":13,"comment":"A table used by ****require**** simply returns the value stored there."},{"url":"","name":"loadlib","base":"package","kind":12,"comment":"Dynamically links the host program with the C library **libname**.","parameters":["libname","funcname"]},{"url":"","name":"path","base":"package","kind":13,"comment":"The path used by ****require**** to search for a Lua loader."},{"url":"","name":"preload","base":"package","kind":13,"comment":"A table to store loaders for specific modules (see ****require****)."},{"url":"","name":"searchers","base":"package","kind":13,"comment":"A table used by ****require**** to control how to load modules."},{"url":"","name":"searchpath","base":"package","kind":12,"comment":"Searches for the given **name** in the given **path**.","parameters":["name","path","sep","rep"]},{"url":"","name":"string","kind":3,"comment":"This library provides generic functions for string manipulation, such as finding and extracting substrings, and pattern matching. When indexing a string in Lua, the first character is at position 1 (not at 0, as in C). Indices are allowed to be negative and are interpreted as indexing backwards, from the end of the string. Thus, the last character is at position -1, and so on."},{"url":"","name":"byte","base":"string","kind":12,"comment":"Returns the internal numeric codes of the characters **s[i]**, **s[i+1]**, ..., **s[j]**. The default value for **i** is 1; the default value for **j** is **i**. These indices are corrected following the same rules of function ****string.sub****.","parameters":["s","i","j"]},{"url":"","name":"char","base":"string","kind":12,"comment":"Receives zero or more integers. Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.","parameters":["..."]},{"url":"","name":"dump","base":"string","kind":12,"comment":"Returns a string containing a binary representation (a binary chunk) of the given function, so that a later ****load**** on this string returns a copy of the function (but with new upvalues). If **strip** is a true value, the binary representation may not include all debug information about the function, to save space.","parameters":["function","strip"]},{"url":"","name":"find","base":"string","kind":12,"comment":"Looks for the first match of **pattern** (see **&6.4.1**) in the string **s**. If it finds a match, then **find** returns the indices of **s** where this occurrence starts and ends; otherwise, it returns **nil**. A third, optional numeric argument **init** specifies where to start the search; its default value is 1 and can be negative. A value of **true** as a fourth, optional argument **plain** turns off the pattern matching facilities, so the function does a plain \"find substring\" operation, with no characters in **pattern** being considered magic. Note that if **plain** is given, then **init** must be given as well.","parameters":["s","pattern","init","plain"]},{"url":"","name":"format","base":"string","kind":12,"comment":"Returns a formatted version of its variable number of arguments following the description given in its first argument (which must be a string). The format string follows the same rules as the ISO C function **sprintf**. The only differences are that the options/modifiers *****, **h**, **L**, **l**, **n**, and **p** are not supported and that there is an extra option, **q**.","parameters":["formatstring","..."]},{"url":"","name":"gmatch","base":"string","kind":12,"comment":"Returns an iterator function that, each time it is called, returns the next captures from **pattern** (see **&6.4.1**) over the string **s**. If **pattern** specifies no captures, then the whole match is produced in each call.","parameters":["s","pattern"]},{"url":"","name":"gsub","base":"string","kind":12,"comment":"Returns a copy of **s** in which all (or the first **n**, if given) occurrences of the **pattern** (see **&6.4.1**) have been replaced by a replacement string specified by **repl**, which can be a string, a table, or a function. **gsub** also returns, as its second value, the total number of matches that occurred. The name **gsub** comes from Global SUBstitution.","parameters":["s","pattern","repl","n"]},{"url":"","name":"len","base":"string","kind":12,"comment":"Receives a string and returns its length. The empty string **\"\"** has length 0. Embedded zeros are counted, so **\"a\\000bc\\000\"** has length 5.","parameters":["s"]},{"url":"","name":"lower","base":"string","kind":12,"comment":"Receives a string and returns a copy of this string with all uppercase letters changed to lowercase. All other characters are left unchanged. The definition of what an uppercase letter is depends on the current locale.","parameters":["s"]},{"url":"","name":"match","base":"string","kind":12,"comment":"Looks for the first match of **pattern** (see **&6.4.1**) in the string **s**. If it finds one, then **match** returns the captures from the pattern; otherwise it returns **nil**. If **pattern** specifies no captures, then the whole match is returned. A third, optional numeric argument **init** specifies where to start the search; its default value is 1 and can be negative.","parameters":["s","pattern","init"]},{"url":"","name":"pack","base":"string","kind":12,"comment":"Returns a binary string containing the values **v1**, **v2**, etc. packed (that is, serialized in binary form) according to the format string **fmt** (see **&6.4.2**).","parameters":["fmt","v1","v2","..."]},{"url":"","name":"packsize","base":"string","kind":12,"comment":"Returns the size of a string resulting from **&6.4.2**).","parameters":["fmt"]},{"url":"","name":"rep","base":"string","kind":12,"comment":"Returns a string that is the concatenation of **n** copies of the string **s** separated by the string **sep**. The default value for **sep** is the empty string (that is, no separator). Returns the empty string if **n** is not positive.","parameters":["s","n","sep"]},{"url":"","name":"reverse","base":"string","kind":12,"comment":"Returns a string that is the string **s** reversed.","parameters":["s"]},{"url":"","name":"sub","base":"string","kind":12,"comment":"Returns the substring of **s** that starts at **i**  and continues until **j**; **i** and **j** can be negative. If **j** is absent, then it is assumed to be equal to -1 (which is the same as the string length). In particular, the call **string.sub(s,1,j)** returns a prefix of **s** with length **j**, and **string.sub(s, -i)** (for a positive **i**) returns a suffix of **s** with length **i**.","parameters":["s","i","j"]},{"url":"","name":"unpack","base":"string","kind":12,"comment":"Returns the values packed in string **s** (see **&6.4.2**). An optional **pos** marks where to start reading in **s** (default is 1). After the read values, this function also returns the index of the first unread byte in **s**.","parameters":["fmt","s","pos"]},{"url":"","name":"upper","base":"string","kind":12,"comment":"Receives a string and returns a copy of this string with all lowercase letters changed to uppercase. All other characters are left unchanged. The definition of what a lowercase letter is depends on the current locale.","parameters":["s"]},{"url":"","name":"table","kind":3,"comment":"This library provides generic functions for table manipulation. It provides all its functions inside the table ****table****."},{"url":"","name":"concat","base":"table","kind":12,"comment":"Given a list where all elements are strings or numbers, returns the string **list[i]..sep..list[i+1] ... sep..list[j]**. The default value for **sep** is the empty string, the default for **i** is 1, and the default for **j** is **#list**. If **i** is greater than **j**, returns the empty string.","parameters":["list","sep","i","j"]},{"url":"","name":"insert","base":"table","kind":12,"comment":"Inserts element **value** at position **pos** in **list**, shifting up the elements **list[pos], list[pos+1], ..., list[#list]**. The default value for **pos** is **#list+1**, so that a call **table.insert(t,x)** inserts **x** at the end of list **t**.","parameters":["list","pos","value"]},{"url":"","name":"move","base":"table","kind":12,"comment":"Moves elements from table **a1** to table **a2**, performing the equivalent to the following multiple assignment: **a2[t],... = a1[f],...,a1[e]**. The default for **a2** is **a1**. The destination range can overlap with the source range. The number of elements to be moved must fit in a Lua integer.","parameters":["a1","f","e","t,a2"]},{"url":"","name":"pack","base":"table","kind":12,"comment":"Returns a new table with all arguments stored into keys 1, 2, etc. and with a field \"**n**\" with the total number of arguments. Note that the resulting table may not be a sequence.","parameters":["..."]},{"url":"","name":"remove","base":"table","kind":12,"comment":"Removes from **list** the element at position **pos**, returning the value of the removed element. When **pos** is an integer between 1 and **#list**, it shifts down the elements **list[pos+1], list[pos+2], ..., list[#list]** and erases element **list[#list]**; The index **pos** can also be 0 when **#list** is 0, or **#list + 1**; in those cases, the function erases the element **list[pos]**.","parameters":["list","pos"]},{"url":"","name":"sort","base":"table","kind":12,"comment":"Sorts list elements in a given order, in-place, from **list[1]** to **list[#list]**. If **comp** is given, then it must be a function that receives two list elements and returns true when the first element must come before the second in the final order (so that, after the sort, **i &lt; j** implies **not comp(list[j],list[i])**). If **comp** is not given, then the standard Lua operator **&lt;** is used instead.","parameters":["list","comp"]},{"url":"","name":"unpack","base":"table","kind":12,"comment":"Returns the elements from the given list. This function is equivalent to  \n\n      return list[i], list[i+1], ..., list[j] \n\n By default, **i** is 1 and **j** is **#list**","parameters":["list","i","j"]},{"url":"","name":"utf8","kind":3,"comment":"This library provides basic support for UTF-8 encoding. It provides all its functions inside the table ****utf8****. This library does not provide any support for Unicode other than the handling of the encoding. Any operation that needs the meaning of a character, such as character classification, is outside its scope."},{"url":"","name":"char","base":"utf8","kind":12,"comment":"Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.","parameters":["..."]},{"url":"","name":"charpattern","base":"utf8","kind":13,"comment":"The pattern (a string, not a function) \"**[\\0-\\x7F\\xC2-\\xF4][\\x80-\\xBF]***\" (see **&6.4.1**), which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string."},{"url":"","name":"codepoint","base":"utf8","kind":12,"comment":"Returns the codepoints (as integers) from all characters in **s** that start between byte position **i** and **j** (both included). The default for **i** is 1 and for **j** is **i**. It raises an error if it meets any invalid byte sequence.","parameters":["s","i","j"]},{"url":"","name":"codes","base":"utf8","kind":12,"comment":"Returns values so that the construction  \n\n      for p, c in utf8.codes(s) do body end \n\n will iterate over all characters in string **s**, with **p** being the position (in bytes) and **c** the code point of each character. It raises an error if it meets any invalid byte sequence","parameters":["s"]},{"url":"","name":"len","base":"utf8","kind":12,"comment":"Returns the number of UTF-8 characters in string **s** that start between positions **i** and **j** (both inclusive). The default for **i** is 1 and for **j** is -1. If it finds any invalid byte sequence, returns a false value plus the position of the first invalid byte.","parameters":["s","i","j"]},{"url":"","name":"offset","base":"utf8","kind":12,"comment":"Returns the position (in bytes) where the encoding of the **n**-th character of **s** (counting from position **i**) starts. A negative **n** gets characters before position **i**. The default for **i** is 1 when **n** is non-negative and **#s + 1** otherwise, so that **utf8.offset(s, -n)** gets the offset of the **n**-th character from the end of the string. If the specified character is neither in the subject nor right after its end, the function returns **nil**.","parameters":["s","n","i"]}]